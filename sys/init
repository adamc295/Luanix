--[[
	Luanix init
	---------------
	Temporary init program, will move to a UI program soon.
]]--
local maxX,maxY = term.getSize()
local btnx = math.floor(maxX/3)
local space = math.floor((maxX-(btnx*3))/2)
local event = {}
local originalTerm, mainTerm
originalTerm = term.current()
mainTerm = window.create(originalTerm, 1, 1, maxX, maxY)
local packageList = {
  os = {
    type = "system",
    size = 0,
  },
  launcher = {
    type = "system",
    size = 0,
  },
}
local luanix = {}

-- Buttons
local toolBar, backButton, homeButton, taskListBtn
local backbtnstr = "<-"
local homebtnstr = "[]"
local taskbtnstr = "|||"

luanix.taskmanager = {
  tasklist = {}
}

local function turnInvisible()
  for each, task in pairs(luanix.taskmanager.tasklist) do
    if task.isVisible then
      luanix.taskmanager.tasklist[each].setVisible(false)
    end
  end
end

--[[
local background = paintutils.loadImage("/etc/init/background.nfp")
if not background then
	printError("background not found")
	while true do
		sleep(0.1)
	end
end
]]--

function getPakList()
	local t = {}
	for each, a in pairs(packageList) do
		t[each] = a
	end
	return t
end

function loadApp(appname,visible)
	local list = getPakList()
	if not fs.exists("/etc/luanixui/apps/"..appname.."/startup") then
		return false, "startup not found"
	end
	local prog, err = loadfile("/etc/luanixui/apps/"..appname.."/startup")
	if not prog then
		return false, err
	end
	local env = {}
    for each, val in pairs(_G) do
      env[each] = val
    end
    setmetatable(env, {__index = _G})
    env._G = env
    local self = {}
    self.window = window.create(mainTerm, 1, 1, maxX, maxY-1)
    self.dead = false
    self.name = appname
    env.term.native = function()
      return self.window
    end
    env.app = {
      exit = function()
        term.redirect(originalTerm)
        self.dead = true
        self.coroutine = nil
      end,
    }
	self.coroutine = coroutine.create(prog)
    self.filter = ""
	self.type = list[appname].type
    self.isVisible = visible
    env.app.isMinimized = function()
      if self.isVisible then
        return false
      else
        return true
      end
    end

	if self.isVisible then
      turnInvisible()
    end
    self.setVisible = function(bool)
      self.isVisible = bool
      self.window.setVisible(bool)
    end
	self.resume = function(args)
      if args[1] == self.filter or filter == nil or filter == "" then
        term.redirect(self.window)
        local _, ok, fltr = pcall(coroutine.resume, self.coroutine, unpack(args))
        if not _ or not ok then
          local file = fs.open("/log/"..os.time(), "w")
          file.writeLine("App: "..self.name..", crashed: ".."could run?"..tostring(ok).."; Error: "..tostring(fltr))
          file.close()
          term.redirect(originalTerm)
          self.dead = true
          return false, (ok or fltr)
        else
          self.filter = fltr
          if self.coroutine and coroutine.status(self.coroutine) == "dead" then
            self.dead = true
          elseif not self.coroutine then
            self.dead = true
          end
        end
      end
    end
	return self
end

function luanix.taskmanager.runApp(appname, visible)
	if not luanix.taskmanager.tasklist[appName] then
		local t, err = loadApp(appname, visible)
		if not t then return false, err end
		return true
	else
		turnInvisible()
		luanix.taskmanager.tasklist[appName].setVisible(true)
		return true
	end
end

local function sethome(name)
	turnInvisible()
	luanix.taskmanager.tasklist[name] = nil
	luanix.taskmanager.runApp(name, true)
end

function main()
	toolbar = window.create(mainTerm, 1, maxY, maxX, 1)
	local x, y
	backButton = {}
	backButton.window = window.create(toolbar, 1, 1, btnx, 1)
	function backButton.click()
		local x, y = backButton.window.getSize()
		backButton.window.setCursorPos(math.floor(x/2),1)
		backButton.window.setBackgroundColor(colors.white)
		backButton.window.setTextColor(colors.black)
		backButton.window.clear()
		backButton.window.write(backbtnstr)
		sleep(0.125)
		backButton.window.setCursorPos(math.floor(x/2),1)
		backButton.window.setBackgroundColor(colors.black)
		backButton.window.setTextColor(colors.white)
		backButton.window.clear()
		backButton.window.write(backbtnstr)
	end
	homeButton = {}
	homeButton.window = window.create(toolbar, btnx+space+1, 1, btnx, 1)
	function homeButton.click()
		local x, y = homeButton.window.getSize()
		homeButton.window.setCursorPos(math.floor(x/2),1)
		homeButton.window.setBackgroundColor(colors.white)
		homeButton.window.setTextColor(colors.black)
		homeButton.window.clear()
		homeButton.window.write(homebtnstr)
		sleep(0.125)
		homeButton.window.setCursorPos(math.floor(x/2),1)
		homeButton.window.setBackgroundColor(colors.black)
		homeButton.window.setTextColor(colors.white)
		homeButton.window.clear()
		homeButton.window.write(homebtnstr)
	end
	taskListBtn = {}
	taskListBtn.window = window.create(toolbar, (btnx*2)+(space*2)+1, 1, btnx, 1)
	function taskListBtn.click()
		local x, y = taskListBtn.window.getSize()
		taskListBtn.window.setCursorPos(math.floor(x/2),1)
		taskListBtn.window.setBackgroundColor(colors.white)
		taskListBtn.window.setTextColor(colors.black)
		taskListBtn.window.clear()
		taskListBtn.window.write(taskbtnstr)
		sleep(0.125)
		taskListBtn.window.setCursorPos(math.floor(x/2),1)
		taskListBtn.window.setBackgroundColor(colors.black)
		taskListBtn.window.setTextColor(colors.white)
		taskListBtn.window.clear()
		taskListBtn.window.write(taskbtnstr)
	end
	sethome("launcher")
	while true do
		local killtab = {}
		for each, task in pairs(luanix.taskmanager.tasklist) do
			if not task.dead and task.isVisible then
				local ok, err = luanix.taskmanager.tasklist[each].resume(event)
				if ok == false then
					if task.type == "system" then
						printError(err)
					else
						os.queueEvent("app_crash", tostring(err))
						luanix.taskmanager.tasklist[each].dead = true
					end
				table.insert(killtab, each)
			end
		elseif not task.dead and not task.isVisible then
			local t = {"key", "paste", "terminate", "mouse"}
			local found = false
			if event[1] ~= nil then
				for each, var in ipairs(t) do
					if string.find(event[1], var) then
						found = true
						break
					end
				end
			end
			if found and not _crashed then
				local ok, err = luanix.taskmanager.tasklist[each].resume({})
				if ok == false then
					if task.type == "system" then
						printError(err)
					end
					table.insert(killtab, each)
				end
			else
				local ok, err = luanix.taskmanager.tasklist[each].resume(event)
				if ok == false then
					if task.type == "system" then
						printError(err)
					end
					table.insert(killtab, each)
				end
			end
		else
			table.insert(killtab, each)
		end
    end
		redrawScreen()
		event = {os.pullEventRaw()}
		if event[1] == "mouse_click" then
			local btn, x, y = event[2], event[3], event[4]
			if btn == 1 and x >= 1 and x <= btnx and y == maxY then
				-- Back button
				backButton.click()
			elseif btn == 1 and x >= btnx+space+1 and x <= (btnx*2)+space and y == maxY then
				-- Home button
				homeButton.click()
				break
			elseif btn == 1 and x >= (btnx*2)+(space*2)+1 and x <= maxX and y == maxY then
				-- Task button
				taskListBtn.click()
			end
		end
		sleep(0.01)
	end
end

local function redrawToolbar()
	toolbar.setBackgroundColor(colors.black)
	toolbar.setTextColor(colors.white)
	toolbar.clear()
end

local function redrawBackbtn()
	x, y = backButton.window.getSize()
	backButton.window.setCursorPos(math.floor(x/2),1)
	backButton.window.setBackgroundColor(colors.black)
	backButton.window.setTextColor(colors.white)
	backButton.window.clear()
	backButton.window.write(backbtnstr)
end

local function redrawHomebtn()
	x, y = homeButton.window.getSize()
	homeButton.window.setCursorPos(math.floor(x/2),1)
	homeButton.window.setBackgroundColor(colors.black)
	homeButton.window.setTextColor(colors.white)
	homeButton.window.clear()
	homeButton.window.write(homebtnstr)
end

local function redrawTaskbtn()
	x, y = taskListBtn.window.getSize()
	taskListBtn.window.setCursorPos(math.floor(x/2),1)
	taskListBtn.window.setBackgroundColor(colors.black)
	taskListBtn.window.setTextColor(colors.white)
	taskListBtn.window.clear()
	taskListBtn.window.write(taskbtnstr)
end

function redrawScreen()
	term.setCursorPos(1,1)
	term.setBackgroundColor(colors.gray)
	term.clear()
	--paintutils.drawImage(background, 1,1)
	redrawToolbar() -- The big black line
	redrawBackbtn() -- SLIIIDE TO THE LEFT
	redrawHomebtn() -- middel
	redrawTaskbtn() -- SLIIIDE TO THE RIGHT
	-- CRISS CROSS
end

main()
originalTerm, mainTerm, toolBar, backButton, homeButton, taskListBtn = nil, nil, nil, nil, nil, nil
term.setCursorPos(1,1)
term.setBackgroundColor(colors.cyan)
term.clear()
print("Thank you for using luanix.")
print("I thank you for downloading this in the first place.")
sleep(2)
os.reboot()